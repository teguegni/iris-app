# Importer les biblioth√®ques n√©cessaires  
import streamlit as st  
import pandas as pd  
import altair as alt  
#import seaborn as sns  
#import matplotlib.pyplot as plt  

# Configuration de la page  
st.set_page_config(  
    page_title="Classification des Donn√©es Bancaires",   
    page_icon="üè¶",  
    layout="wide",  
    initial_sidebar_state="expanded"  
)  

alt.themes.enable("dark")  

# -------------------------  
# Barre lat√©rale  

if 'page_selection' not in st.session_state:  
    st.session_state.page_selection = 'a_propos'  # Page par d√©faut
    # Fonction pour mettre √† jour page_selection  
def set_page_selection(page):  
    st.session_state.page_selection = page  

with st.sidebar:  
    st.title('üè¶ Classification des Donn√©es Bancaires')  
    
    # Navigation par boutons  
    st.subheader("Sections")  
    if st.button("√Ä Propos", use_container_width=True, on_click=set_page_selection, args=('a_propos',)):  
        pass  
    if st.button("Jeu de Donn√©es", use_container_width=True, on_click=set_page_selection, args=('jeu_de_donnees',)):  
        pass  
    if st.button("Analyse Exploratoire", use_container_width=True, on_click=set_page_selection, args=('analyse_exploratoire',)):  
        pass  
    if st.button("Nettoyage / Pr√©traitement des Donn√©es", use_container_width=True, on_click=set_page_selection, args=('nettoyage_donnees',)):  
        pass  
    if st.button("Apprentissage Automatique", use_container_width=True, on_click=set_page_selection, args=('apprentissage_automatique',)):   
        pass  
    if st.button("Pr√©diction", use_container_width=True, on_click=set_page_selection, args=('prediction',)):   
        pass  
    if st.button("Conclusion", use_container_width=True, on_click=set_page_selection, args=('conclusion',)):  
        pass  
         # D√©tails du projet  
    st.subheader("R√©sum√©")  
    st.markdown("""  
        Un tableau de bord interactif pour explorer et classifier les donn√©es d'une campagne marketing bancaire.  
        
        - üìä [Jeu de Donn√©es](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)  
        - üìó [Notebook Google Colab](https://colab.research.google.com/drive/1KJDBrx3akSPUW42Kbeepj64ZisHFD-NV?usp=sharing)  
        - üêô [D√©p√¥t GitHub](https://github.com/teguegni/bank-additionnal-full/Streamlit-Bank-Classification-Dashboard)  
        
        **Auteur :** [`Kenfack Teguegni Junior`](https://jcdiamante.com)  
    """)  

# -------------------------  

# Charger les donn√©es  
try:  
    df = pd.read_csv('bank-additional-full.csv', delimiter=';')  
except FileNotFoundError:  
    st.error("Le fichier 'bank-additional-full.csv' est introuvable. Veuillez v√©rifier son emplacement.")  
    st.stop()  

# Page principale  
if st.session_state.page_selection == 'a_propos':  
    # Page √Ä Propos  
    st.title("üè∑Ô∏è √Ä Propos")  
    st.markdown("""  
        Cette application explore le jeu de donn√©es **Bank Marketing** et propose :  
        
        - Une exploration visuelle des donn√©es.  
        - Un pr√©traitement et nettoyage des donn√©es.  
        - La construction et l'√©valuation de mod√®les d'apprentissage automatique.  
        - Une interface interactive pour pr√©dire si un client souscrira √† un produit. 
         **Technologies utilis√©es :**  
        - Python (Streamlit, Altair, Pandas)  
        - Machine Learning (Scikit-learn)  
        
        **Auteur : Kenfack Teguegni Junior**  
        
        ‚úâÔ∏è Contact : kenfackteguegni@gmail.com  
    """)  

elif st.session_state.page_selection == 'jeu_de_donnees':  
    # Page Jeu de Donn√©es  
    st.title("üìä Jeu de Donn√©es")  
    
    # Afficher les premi√®res lignes du DataFrame  
    if st.checkbox("Afficher le DataFrame"):  
        nb_rows = st.slider("Nombre de lignes √† afficher :", min_value=5, max_value=50, value=10)  
        st.write(df.head(nb_rows))  
    
    # Afficher les statistiques descriptives  
    if st.checkbox("Afficher les statistiques descriptives"):  
        st.write(df.describe())  

elif st.session_state.page_selection == 'analyse_exploratoire':  
    # Page Analyse Exploratoire  
    st.title("üîç Analyse Exploratoire")  
    
    # V√©rification des valeurs manquantes  
    st.subheader("V√©rification des valeurs manquantes")  
    missing_values = df.isnull().sum()  
    st.write(missing_values[missing_values > 0])  
    # Visualisation de la relation entre l'√¢ge et le m√©tier  
    st.subheader("Relation entre l'√¢ge et le m√©tier")  
    age_job_chart = alt.Chart(df).mark_circle(size=60).encode(  
        x='age',  
        y='job',  
        color='y',  # Utilisez 'y' pour distinguer les souscriptions  
        tooltip=['age', 'job', 'y']  
    ).interactive()  
    
    st.altair_chart(age_job_chart, use_container_width=True)  

    # Analyse des corr√©lations  
    st.subheader("Analyse des corr√©lations")  
    correlation_matrix = df.corr()    
    # Affichage de la heatmap  
    fig, ax = plt.subplots()  
    sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', ax=ax)  
    st.pyplot(fig)
elif st.session_state.page_selection == 'nettoyer les donn√©es ':
     # Traitement des variables cat√©gorielles  
    data = pd.get_dummies(data, drop_first=True)  

    # Normalisation des donn√©es (si n√©cessaire)  
    from sklearn.preprocessing import StandardScaler  

    scaler = StandardScaler()  
    data[['age', 'duration', 'campaign', 'pdays', 'previous']] = scaler.fit_transform(data[['age', 'duration', 'campaign', 'pdays', 'previous']])
    # S√©paration des features et de la target  
    X = data.drop('y', axis=1)  # On suppose que 'y_yes' est la colonne cible  
    y = data['y']  
elif st.session_state.page_selection == 'apprentissage_automatique':
    from sklearn.model_selection import train_test_split  
    from sklearn.ensemble import RandomForestClassifier  
    from sklearn.metrics import classification_report, confusion_matrix  

    # S√©paration des donn√©es en ensembles d'entra√Ænement et de test  
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  

    # Cr√©ation et entra√Ænement du mod√®le  
    model = RandomForestClassifier(n_estimators=100, random_state=42)  
    model.fit(X_train, y_train)  

elif st.session_state.page_selection == 'prediction':  
    # Page Pr√©diction  
    st.title("üîÆ Pr√©diction")  
    
    # Formulaire pour saisir les caract√©ristiques  
    age = st.number_input("√Çge du client", min_value=18, max_value=120, value=30)  
    duration = st.number_input("Dur√©e du contact (seconds)", min_value=0, value=60)  
    campaign = st.number_input("Nombre de contacts lors de la campagne", min_value=1, value=1)  
    
    if st.button("Pr√©dire"): 
        import scikit-learn 
        from sklearn.model_selection import train_test_split  
        from sklearn.preprocessing import StandardScaler  
        from sklearn.ensemble import RandomForestClassifier
        import seaborn as sns  
        import matplotlib.pyplot as plt  
    try:  
            # Pr√©traitement potentiel des donn√©es d'entr√©e et des caract√©ristiques  
            # (Assurez-vous que le mod√®le est d√©j√† form√© au pr√©alable et charg√© ici)  
            X = df[['age', 'duration', 'campaign']]  # Ajustez selon vos colonnes de caract√©ristiques.  
            y = df['y']  # Cible √† pr√©dire  
            
            # Splitting and training d'un mod√®le d'exemple  
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)  
            model = RandomForestClassifier()  
            model.fit(X_train, y_train)  
            
            prediction = model.predict([[age, duration, campaign]])  
            subscription_status = "Oui" if prediction[0] == 'yes' else "Non"  
            st.success(f"Le client va-t-il souscrire au produit ? : **{subscription_status}**") 
            # Pr√©dictions  
            y_pred = model.predict(X_test)  

            # √âvaluation  
            print(confusion_matrix(y_test, y_pred))  
            print(classification_report(y_test, y_pred))
    except Exception as e:  
            st.error(f"Une erreur est survenue : {e}")

    


  

   
